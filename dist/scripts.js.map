{"version":3,"sources":["scripts.js","sounds.js"],"names":["document","documentElement","querySelector","header","footer","mainHomepage","blog","categoryBtn","querySelectorAll","categoriesSelect","blogPosts","postItem","window","onload","event","classList","remove","mainElementMinHeight","headerHeight","offsetHeight","footerHeight","style","minHeight","selectedCategoryID","categoryID","showEachPost","forEach","post","showPosts","add","setTimeout","postID","getAttribute","emptyBlogPosts","slideTimeout","length","console","log","category","addEventListener","dataset","message","errorMessageVisible","insertAdjacentHTML","error","errorText","textContent","errorMessages","value","showHidePostItems","slideshow","slides","slideshowControls","slideshowDots","interval","slideCount","currentSlideIndex","showSlide","slideIndex","slide","removeAttribute","setAttribute","clearTimeout","setDotStatus","controls","controlsPrev","controlsNext","index","dot","createElement","appendChild","slideshowDotButtons","allDots","showDots","parseInt","slideshowAboutPage","slideshowAbout","slideshowAboutSlides","innerWidth","wpBlockGallery","gallery","slideshowWordpress","sounds","soundsItem","soundButton","soundAudio","play"],"mappings":"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","file":"scripts.js","sourcesContent":["// ***********************************\n//  alxwntr Layout Scripts\n// ***********************************\n// Created by Alex Winter on 2023-05-26\n// Last Modified: 2023-09-04\n\n(function () {\n\n// ***********************************\n//  Global Elements\n// ***********************************\nconst root = document.documentElement;\nconst body = document.querySelector('body')\nconst header = document.querySelector('.site-header')\nconst footer = document.querySelector('.site-footer')\nconst mainHomepage = document.querySelector('.site-main.homepage')\nconst blog = document.querySelector('.blog')\nconst categoryBtn = document.querySelectorAll('.category__btn')\nconst categoriesSelect = document.querySelector('.categories__select')\nconst blogPosts = document.querySelectorAll('.blog__posts')\nconst postItem = document.querySelectorAll('.post__item')\n\n\n\n\n// ***********************************\n//  Prevent CSS transitions from firing on page load\n// ***********************************\n// requirement: the 'body' element on each page must have a class of 'preload'\n// requirement: the necessary CSS for the 'preload' class must exist\nwindow.onload = (event) => {\n\tdocument.querySelector('body').classList.remove('preload')\n}\n\n\n\n\n// ***********************************\n//  Main Element Min Height\n// ***********************************\n// When the page loads, set the min-height of the main element to the height of the viewport minus the height of the header and footer\n// But also add 1px so that the main element is always at least 1px taller than the viewport which ensures a vertical scrollbar is always present. This is important because changing blog post categories (on the homepage) will cause the main element to change height and without this +1px then if the main element is shorter than the viewport, the vertical scrollbar will disappear and the page will shift.\nmainElementMinHeight = () => {\n\tconst headerHeight = header.offsetHeight\n\tconst footerHeight = footer.offsetHeight\n\n\tif (!mainHomepage) {\n\t\treturn\n\t}\n\n\tmainHomepage.style.minHeight = `calc(100vh - ${headerHeight}px - ${footerHeight}px + 1px)`\n}\nmainElementMinHeight()\n\n\n\n\n// ***********************************\n//  Error Messages\n// ***********************************\nconst errorMessages = (message) => {\n\tlet errorMessageVisible = false;\n\n\tdocument.querySelector('body').insertAdjacentHTML('beforeend', '<div class=\"error\" role=\"alert\" aria-label=\"Error message\"><p></p></div>');\n\tconst error = document.querySelector('.error');\n\tconst errorText = document.querySelector('.error p');\n\n\tif (!errorMessageVisible) {\n\t\terrorMessageVisible = true;\n\n\t\terrorText.textContent = message;\n\t\terror.classList.add('active');\n\n\t\tsetTimeout(function() {\n\t\t\terrorMessageVisible = false;\n\t\t\terror.classList.remove('active');\n\t\t\t\n\t\t\tsetTimeout(function() {\n\t\t\t\terror.remove();\n\t\t\t}, 1000)\n\t\t}, 4000)\n\t}\n}\n\n\n\n\n// ***********************************\n//  Show / Hide Post Items by Category ID\n// ***********************************\nconst showHidePostItems = () => {\n\tif (!blog) return\n\n\tlet selectedCategoryID = 'all' // default category ID\n\tlet categoryID = null // category ID that is clicked or selected\n\n\t// function that shows the post items when the user clicks a category button or selects a category from the dropdown\n\tconst showEachPost = () => {\n\t\tpostItem.forEach((post) => {\n\t\t\t// function that shows the post items\n\t\t\tconst showPosts = () => {\n\t\t\t\tpost.classList.add('active')\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tpost.classList.add('fade')\n\t\t\t\t}, 100)\n\t\t\t}\n\n\t\t\t// get the post ID\n\t\t\tconst postID = post.getAttribute('data-category')\n\n\t\t\t// remove fade class from ALL posts\n\t\t\tpost.classList.remove('fade')\n\n\t\t\tsetTimeout(() => {\n\t\t\t\t// add active class to all posts if user clicks 'all' category\n\t\t\t\tif (categoryID === 'all') {\n\t\t\t\t\tshowPosts()\n\t\t\t\t}\n\t\t\t\t// remove active class from posts that do not match the category ID\n\t\t\t\telse if (categoryID !== postID) {\n\t\t\t\t\tpost.classList.remove('active')\n\t\t\t\t}\n\t\t\t\t// add 'active' and 'fade' class to posts that do match\n\t\t\t\telse {\n\t\t\t\t\tshowPosts()\n\t\t\t\t}\n\t\t\t}, 500)\n\t\t})\n\t}\n\n\t// check for empty blog post containers\n\tconst emptyBlogPosts = () => {\n\t\t// must wait for classes to be added/removed from '.post__item' elements before running\n\t\tslideTimeout = setTimeout(() => {\n\t\t\tblogPosts.forEach((blog) => {\n\t\t\t\tif (blog.querySelectorAll('.post__item.active').length === 0) {\n\t\t\t\t\tblog.classList.add('empty')\n\t\t\t\t\tconsole.log('no posts')\n\t\t\t\t} else {\n\t\t\t\t\tblog.classList.remove('empty')\n\t\t\t\t}\n\t\t\t})\n\t\t}, 1000)\n\t}\n\n\t// user clicks a category button\n\tcategoryBtn.forEach((category) => {\n\t\tcategory.addEventListener('click', () => {\n\t\t\t// get the category ID\n\t\t\tcategoryID = category.getAttribute('data-category')\n\n\t\t\t// error message if user clicks the category button that is already selected\n\t\t\tif (categoryID === selectedCategoryID) {\n\t\t\t\terrorMessages('You\\'re already viewing this category.')\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// remove active class from ALL category buttons\n\t\t\tcategoryBtn.forEach((category) => {\n\t\t\t\tcategory.classList.remove('active')\n\t\t\t})\n\n\t\t\t// add active class to the category button that was clicked\n\t\t\tselectedCategoryID = categoryID\n\t\t\tif (category.dataset.category === selectedCategoryID) {\n\t\t\t\tcategory.classList.add('active')\n\t\t\t}\n\n\t\t\t// show the post items\n\t\t\tshowEachPost()\n\n\t\t\t// check for empty blog post containers\n\t\t\temptyBlogPosts()\n\t\t})\n\t})\n\n\t// user selects a category from the dropdown\n\tif (!categoriesSelect) return\n\tcategoriesSelect.addEventListener('change', () => {\n\t\t// get the category ID\n\t\tcategoryID = categoriesSelect.value\n\n\t\t// show the post items\n\t\tshowEachPost()\n\n\t\t// check for empty blog post containers\n\t\temptyBlogPosts()\n\t})\n}\nshowHidePostItems()\n\n\n\n// ***********************************\n//  Slideshow - Fade In / Out\n// ***********************************\nconst slideshow = () => {\n    const slideshows = document.querySelectorAll('.slideshow')\n\n    slideshows.forEach((slideshow) => {\n\t\t// get all slide elements\n        const slides = slideshow.querySelectorAll('.slideshow__slide')\n\t\tconst slideshowControls = slideshow.querySelectorAll('.slideshow__controls')\n\t\tconst slideshowDots = slideshow.querySelector('.slideshow__dots')\n\n\t\t// set the interval between slides\n\t\tconst interval = slideshow.getAttribute('data-interval')\n\n\t\t// total amount of slides\n        const slideCount = slides.length\n\n\t\t// initial index\n        let currentSlideIndex = 0\n\n\t\t// To store the timeout ID and clear it when needed\n\t\tlet slideTimeout\n\n\t\t// recursive function that allows us to loop through the slides\n\t\t// initially we set the slideIndex to 0 to display the first slide\n\t\t// then we add 1 to the current slideIndex and use the modulo operator to get the remainder\n\t\t// this determines the next slide to display and loops back to the first slide when the last slide is reached\n        const showSlide = (slideIndex) => {\n\t\t\t// remove status from all slides\n            slides.forEach((slide) => {\n\t\t\t\tslide.removeAttribute('data-status')\n            })\n\n\t\t\t// set status to active on the current slide\n\t\t\tslides[slideIndex].setAttribute('data-status', 'active')\n\n\t\t\tclearTimeout(slideTimeout)\n            slideTimeout = setTimeout(() => {\n\t\t\t\t// go to the next slide and loop back to the first slide when the last slide is reached\n                let newSlideIndex = (slideIndex + 1) % slideCount\n                showSlide(newSlideIndex)\n\n\t\t\t\t// set dot status\n\t\t\t\tsetDotStatus()\n            }, interval)\n\n\t\t\t// used by the prev/next buttons\n\t\t\tcurrentSlideIndex = slideIndex\n\n\t\t\t// console.log(slideIndex)\n\t\t}\n\n\n\n\n\t\t// ***********************************\n\t\t//  Controls - Prev / Next\n\t\t// ***********************************\n\t\tconst showControls = () => {\n\t\t\tif (!slideshowControls) return\n\n            slideshowControls.forEach((controls) => {\n                const controlsPrev = controls.querySelector('.slideshow__prev')\n                const controlsNext = controls.querySelector('.slideshow__next')\n\n                // Prev button click event\n                controlsPrev.addEventListener('click', () => {\n                    // if the current slide is the first slide, then we want to go to the very last slide\n                    if (currentSlideIndex === 0) {\n                        currentSlideIndex = slideCount\n                    }\n                    // otherwise we want to go to the previous slide\n                    let newSlideIndex = (currentSlideIndex - 1) % slideCount\n                    showSlide(newSlideIndex)\n\n                    // set dot status\n                    setDotStatus()\n                })\n\n                // Next button click event\n                controlsNext.addEventListener('click', () => {\n                    // go to the next slide\n                    // but if the current slide is the last slide, then we want to go to the very first slide\n                    let newSlideIndex = (currentSlideIndex + 1) % slideCount\n                    showSlide(newSlideIndex)\n\n                    // set dot status\n                    setDotStatus()\n                })\n            })\n\t\t}\n\t\tshowControls()\n\n\n\n\n\t\t// ***********************************\n\t\t//  Dots - Jump to Slide Buttons\n\t\t// ***********************************\n\t\tconst showDots = () => {\n\t\t\tif (!slideshowDots) return\n\n\t\t\t// create dots for each slide\n\t\t\tslides.forEach((slide, index) => {\n\t\t\t\tconst dot = document.createElement('button')\n\t\t\t\tdot.classList.add('slideshow__dot')\n\t\t\t\tdot.setAttribute('data-slide', index)\n\t\t\t\tslideshowDots.appendChild(dot)\n\n\t\t\t\t// initially set the first dot to active\n\t\t\t\tif (index === 0) {\n\t\t\t\t\tdot.setAttribute('data-status', 'active')\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t// get all dot buttons after they have been created dynamically\n\t\t\tconst slideshowDotButtons = slideshowDots.querySelectorAll('.slideshow__dot')\n\n\t\t\t// dot click event\n\t\t\tslideshowDotButtons.forEach((dot) => {\n\t\t\t\tdot.addEventListener('click', () => {\n\t\t\t\t\tshowSlide(dot.getAttribute('data-slide'))\n\n\t\t\t\t\t// clear status from all dots\n\t\t\t\t\tslideshowDotButtons.forEach((allDots) => {\n\t\t\t\t\t\tallDots.removeAttribute('data-status')\n\t\t\t\t\t})\n\n\t\t\t\t\tdot.setAttribute('data-status', 'active')\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\t\tshowDots()\n\n\t\t// for setting dot status when prev/next buttons are clicked and during the setInterval\n\t\tconst setDotStatus = () => {\n\t\t\tif (!slideshowDots) return\n\n\t\t\tconst slideshowDotButtons = slideshowDots.querySelectorAll('.slideshow__dot')\n\t\t\t\n\t\t\tslideshowDotButtons.forEach((dot) => {\n\t\t\t\tdot.removeAttribute('data-status')\n\n\t\t\t\tif (currentSlideIndex === parseInt(dot.getAttribute('data-slide'))) {\n\t\t\t\t\tdot.setAttribute('data-status', 'active')\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\n\n\n        // ***********************************\n\t\t//  Start the Slideshow\n\t\t// ***********************************\n        showSlide(currentSlideIndex)\n    })\n}\nslideshow()\n\n\n\n\n// ***********************************\n//  Slideshow - About Responsiveness\n// ***********************************\nconst slideshowAboutPage = () => {\n\tconst slideshowAbout = document.querySelector('.slideshow--about')\n\n\tif (!slideshowAbout) return\n\n\tconst slideshowAboutSlides = slideshowAbout.querySelectorAll('.slideshow__slide')\n\n\tif (window.innerWidth > 1120) {\n\t\tslideshowAboutSlides.forEach((slide) => {\n\t\t\tslide.classList.remove('slideshow__slide--vw600')\n\t\t})\n\t} else if (window.innerWidth <= 1120 && window.innerWidth > 480) {\n\t\tslideshowAboutSlides.forEach((slide) => {\n\t\t\tslide.classList.add('slideshow__slide--vw600')\n\t\t})\n\t} else if (window.innerWidth <= 480) {\n\t\tslideshowAboutSlides.forEach((slide) => {\n\t\t\tslide.classList.remove('slideshow__slide--vw600')\n\t\t})\n\t}\n}\nslideshowAboutPage()\nwindow.addEventListener('resize', () => {\n\tslideshowAboutPage()\n})\n\n\n\n\n// ***********************************\n//  Slideshow - WordPress\n// ***********************************\nconst slideshowWordpress = () => {\n\tconst wpBlockGallery = document.querySelectorAll('.wp-block-gallery')\n\n\tif (!wpBlockGallery) return\n\n\twpBlockGallery.forEach((gallery) => {\n\t\tgallery.classList.add('slideshow')\n\t\tgallery.setAttribute('data-interval', '5000')\n\n\t\tconst gallerySlides = gallery.querySelectorAll('.wp-block-image')\n\n\t\tgallerySlides.forEach((slide) => {\n\t\t\tslide.classList.add('slideshow__slide')\n\t\t})\n\t})\n\n\tslideshow()\n}\nslideshowWordpress()\n\n\n\n\n})() // end IIFE\n","const sounds = () => {\n  const soundsContainer = document.querySelector('.sounds');\n  const soundsItems = soundsContainer.querySelectorAll('.sounds__item');\n  \n  soundsItems.forEach((soundsItem) => {\n    const soundButton = soundsItem.querySelector('button');\n    const soundAudio = soundsItem.querySelector('audio');\n    \n    soundButton.addEventListener('click', () => {\n      soundAudio.play();\n    })\n  });\n}\n\nsounds();"]}